Integrate SAWO in Ionic App
===========================

Ionic is a complete open-source SDK for hybrid mobile app development.

Let's get our Ionic App running with SAWO
=========================================

Sawo's integration in Ionic app doesn't require any special requirements. So, we will move on to the steps.

Steps
-----

We need to follow a few steps to get SAWO integrated into our application.

1. As the first step to getting our Ionic App to run with SAWO login, we need an essential component, which is the “SAWO API key”. You are probably wondering where we can get these, right? For that, we have to create a project in the SAWO Dashboard, where we can go directly by clicking `here <https://dev.sawolabs.com/>`__.

1.1 Click the “create new project” button. Choose the platform on which we will create our project, where we will be able to see the code beforehand. In this case, it will be “Hybrid” as we are creating it on Ionic. Click continue.

.. image:: ../images/SAWO%2013.png

1.2 Next, give the name of your project. In the “Enter your hostname” section, leave it empty because we will talk about it afterwards. Now, click “create”. There we are. We currently have a project in the SAWO dashboard.

.. image:: ../images/SAWO%203.png

1.3 Now, we can see in the project section the display of details about our project. Open notepad and copy the “API key” because we will need it afterwards.

.. image:: ../images/SAWO%204.png

2. Once we create our project, we would need to set our hostname.

2.1 For development in a local machine, the hostname should be set to 'localhost'. So, write localhost beside the hostname and click "save". 

     - If using ''localhost" as hostname is not working for you, try "127.0.0.1"
.. image:: ../images/SAWO%205.png

2.2 For production, the hostname should be set to your domain.

     - If you are adding your domain, do not add 'https://', ''http://', 'www' or even trailing backslash. Example: We should keep https://dev.sawolabs.com/ as dev.sawolabs.com
.. image:: ../images/SAWO%206.png

3. While integrating SAWO SDK in our application, firstly, we have to install the Sawo package from the code given below:

.. code-block:: none

     npm i sawo
     
We have to go to the folder where we have created the Ionic application and run the code in the terminal, which will install the SAWO package.

4. Next, we have to create a login.tsx component in your components folder.

5. After installation is done, we have to import the Sawo class from the installed sawo package to the top of the file:

.. code-block:: none

    import Sawo from "sawo"
    
6. Next, we have to create a functional component named Login which returns a div that has the id as “sawo-container”.

7. We can style the sawo-container div according to our choice.

8. Within the functional component, we have to create a useEffect hook and declare a config object which holds the identifier type, api key, container id, and an onSuccess callback.

.. code-block:: none

    var config = {
            // should be same as the id of the container created on 3rd step
            containerID: "<container-ID>",
            // can be one of 'email' or 'phone_number_sms'
            identifierType: "phone_number_sms",
            // Add the API key copied from 2nd step
            apiKey: "",
            // Add a callback here to handle the payload sent by sdk
            onSuccess: (payload) => {},
        };
        
- The container ID is the div with the id “sawo-container”, this div will hold the login form generated by sawo.

- Identifier type can be email or phone_number_sms.

- Api key is copied from the dashboard or taken from the sawo-keys csv file that is downloaded once the project is created.

- The onSuccess callback can be user defined. It takes the payload returned after successful authentication as a parameter. The payload can be stored in session or local storage, can be sent in the body of a post request to your server and save it in the database. In Typescript, the type of the payload object needs to be set to object.

9. After that, we have to create an instance off of the Sawo class by passing the config object to the Sawo constructor.

10. Next, using the Sawo instance, we will invoke the showForm() method. 

11. From the client dashboard, we can customize the Sawo login form using different designs, styles and by additional form fields.

12. Once we successfully set up the SAWO SDK with the instructions above, we will get the SAWO login form in our application as shown below:

.. image:: ../images/Untitled%20(10).png

Congratulations! You have successfully integrated SAWO with your Ionic Application.

Conclusion
----------

Hope you have enjoyed this short tutorial. We know this can be hard for a first-timer. If you got stuck, tell us where you got stuck in the #ask-for-help channel in our `official discord server <https://discord.com/invite/TpnCfMUE5P>`__, and our engineers will help you out.

*Enjoy with SAWO and we will see you next time.*
